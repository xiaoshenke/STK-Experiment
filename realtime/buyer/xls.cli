#!/usr/bin/python
# coding=utf-8

import click
from realtime.operate import Operate
from util.time_util import today,get_cur_timestr_8
from realtime.real_util import get_xls_type_param_by,get_plan_param_by

modes = [ 'plan','open','now','noon','close' ]

@click.group()
def cli():
	"""UNREGISTER-XLS CLI"""
	pass

@cli.command()
@click.argument('xls')
@click.option('--day',default='')
@click.option('--time_str',default='')
def flush_pool(xls,day,time_str):
	time_str = time_str if time_str else get_cur_timestr_8()
	day = day if day else str(today())

	from engine.scheduler.buyer.flush.flush_cons import FLUSH_XLS
	from engine.scheduler.buyer.buyer_context import BuyerContext
	context = BuyerContext().set_day(day).set_time_str(time_str).set_throw_exception(True)
	context.set_flush(FLUSH_XLS)

	from engine.report.plan.plan_reporter2 import PlanReporter
	reporter = PlanReporter().set_mode('process')

	from engine.scheduler.buyer.flush.flush_xls_node import FlushXlsNode
	node = FlushXlsNode().set_reporter(reporter)
	b,msg = node.update(context,xls)
	print b,msg

@cli.command()
@click.option('--day',default='')
@click.option('--time_str',default='')
@click.option('--pool',default='')
def flush_pool(day,time_str,pool):
	time_str = time_str if time_str else get_cur_timestr_8()
	day = day if day else str(today())

	from engine.scheduler.buyer.flush.flush_cons import FLUSH_POOL
	from engine.scheduler.buyer.buyer_context import BuyerContext
	context = BuyerContext().set_day(day).set_time_str(time_str).set_throw_exception(True)
	context.set_flush(FLUSH_POOL)

	from engine.report.plan.plan_reporter2 import PlanReporter
	reporter = PlanReporter().set_mode('process')

	from engine.scheduler.buyer.flush.flush_pool_node import FlushPoolNode
	node = FlushPoolNode().set_reporter(reporter)
	b,msg = node.update(context,pool)
	print b,msg

@cli.command()
@click.argument('xls')
@click.option('--mode',default='now')
@click.option('--day',default='')
@click.option('--time_str',default='')
def remove_xls(xls,day,time_str,mode):
	day = day if day else str(today())

        enable_realtime_df,ignore_cache = True,False
        time_str,enable_realtime_df,ignore_cache = get_plan_param_by(mode,time_str,enable_realtime_df,ignore_cache)

	rec = get_unregistered_xls_recorder(day)
	b = rec.add_xls(xls,time_str)
	print b

@cli.command()
@click.argument('xls')
@click.option('--mode',default='now')
@click.option('--day',default='')
@click.option('--time_str',default='')
def renable_xls(xls,day,time_str,mode):
	day = day if day else str(today())

        enable_realtime_df,ignore_cache = True,False
        time_str,enable_realtime_df,ignore_cache = get_plan_param_by(mode,time_str,enable_realtime_df,ignore_cache)

	rec = get_unregistered_xls_recorder(day)
	b,msg = rec.remove_xls(xls,time_str)
	print b,msg

@cli.command()
@click.option('--mode',default='now')
@click.option('--day',default='')
@click.option('--time_str',default='')
def load_all(day,time_str,mode):
	day = day if day else str(today())

        enable_realtime_df,ignore_cache = True,False
        time_str,enable_realtime_df,ignore_cache = get_plan_param_by(mode,time_str,enable_realtime_df,ignore_cache)

	rec = get_unregistered_xls_recorder(day)
	infos = rec.load_all_xls(time_str)
	if len(infos) == 0:
		print u'返回空列表.'
		return

	print u'xls,time_str'
	for xls,time_str in infos:
		print xls,time_str

def get_unregistered_xls_recorder(day):
	from engine.scheduler.buyer.recorder.unregistered_xls_recorder import UnregisteredXlsRecorder
	return UnregisteredXlsRecorder().set_day(day)

if __name__ == "__main__":
	cli()
